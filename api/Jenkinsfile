pipeline {
    agent { label "linux" }
    triggers { cron('H H(18-19) * * *') }
    options { buildDiscarder( logRotator( numToKeepStr: '5' ) ) }
    environment {
        VIRTUAL_HOST = 'api.space-explorer.rdok.dev'
        VIRTUAL_PORT = '3004'
        LETSENCRYPT_HOST = 'api.space-explorer.rdok.dev'
        LETSENCRYPT_EMAIL = credentials('rdok-email')
        DEFAULT_EMAIL = credentials('rdok-email')
    }
    stages {
        stage('Test') { steps { dir('api') { ansiColor('xterm') {
            sh '''
            docker run --rm -v $(pwd):/app -w /app \
               --user $(id -u):$(id -g) \
               node:12-alpine \
               sh -c "yarn install; yarn run jest --coverage --coverageDirectory='./report' --ci"
            '''
        } } } }
        stage('Deploy') { 
           agent { label "rdok.dev" }
           steps { dir('api') { ansiColor('xterm') {
              sh '''
                     docker-compose build --pull
                     docker-compose down --remove-orphans
                     docker-compose up -d
               '''
        } } } }
        stage('Health Check') {
            agent { label "linux" }
            steps { 
                build 'api-health-check'
            } 
        }
    }
    post {
        failure {
            slackSend color: '#FF0000',
            message: "@here Deployment failed: <${env.BUILD_URL}console | ${env.JOB_NAME}#${env.BUILD_NUMBER}>"
        }
        fixed {
            slackSend color: 'good',
            message: "@here Deployment fixed: <${env.BUILD_URL}console | ${env.JOB_NAME}#${env.BUILD_NUMBER}>"
        }
        success {
            slackSend message: "Deployed: <${env.BUILD_URL}console | ${env.JOB_NAME}#${env.BUILD_NUMBER}>"
        }
        always {
            publishHTML([
            allowMissing: false,
            alwaysLinkToLastBuild: true,
            keepAll: false,
            reportFiles: 'index.html',
            reportName: 'Coverage Report',
            reportDir: 'api/report/lcov-report/'
            ])
        }
    }
}
